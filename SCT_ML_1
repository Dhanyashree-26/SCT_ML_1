import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.pipeline import Pipeline
import joblib
import matplotlib.pyplot as plt
from datetime import datetime

data = pd.read_csv(r'C:\Users\dhanyashree\OneDrive\Desktop\house price dataset.csv')

current_year = datetime.now().year
data['House_Age'] = current_year - data['Year_Built']

X = data[['Square_Footage', 'Num_Bedrooms', 'Num_Bathrooms', 'House_Age']]
y = data['House_Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('ridge', Ridge())
])

param_grid = {
    'ridge__alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 200.0, 500.0] 
}

grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='r2')
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score (Accuracy): {r2}")
print("Best alpha:", grid_search.best_params_['ridge__alpha'])

ridge_model = best_model.named_steps['ridge']
print("Model Coefficients:", ridge_model.coef_)
print("Intercept:", ridge_model.intercept_)

model_filename = 'ridge_house_price_model.joblib'
joblib.dump(best_model, model_filename)
print(f"Model saved to {model_filename}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.6, color='b')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--') 
plt.xlabel('Actual House Prices')
plt.ylabel('Predicted House Prices')
plt.title('Actual vs. Predicted House Prices')
plt.show()

# Function to load the model and make predictions based on user input
def predict_house_price():
    # Load the saved model
    loaded_model = joblib.load(model_filename)
    
    print("\nEnter the details of the house to predict its price:")
    square_footage = float(input("Enter square footage: "))
    bedrooms = int(input("Enter number of bedrooms: "))
    bathrooms = int(input("Enter number of bathrooms: "))
    built_year = int(input("Enter the year the house was built: "))

    # Calculate house age
    house_age = current_year - built_year

    # Prepare input data for prediction
    input_data = [[square_footage, bedrooms, bathrooms, house_age]]
    predicted_price = loaded_model.predict(input_data)  # The pipeline already scales input data
    
    print(f"\nPredicted House Price: ${predicted_price[0]:,.2f}")

# Call the function to predict based on user input
predict_house_price()
